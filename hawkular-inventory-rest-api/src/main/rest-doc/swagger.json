{
  "swagger" : "2.0",
  "info" : {
    "version" : "${project.version}",
    "title" : "Hawkular Inventory"
  },
  "basePath" : "/hawkular/inventory",
  "tags" : [ {
    "name" : "API Info"
  }, {
    "name" : "Bulk Create"
  }, {
    "name" : "Deprecated"
  }, {
    "name" : "Entity Graph Traversal"
  }, {
    "name" : "Events"
  }, {
    "name" : "Graph"
  }, {
    "name" : "Single Entity"
  }, {
    "name" : "Sync"
  }, {
    "name" : "Tenant Information"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "API Info" ],
        "summary" : "List Endpoints",
        "description" : "Lists all the REST API endpoints available",
        "operationId" : "ping",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/bulk" : {
      "post" : {
        "tags" : [ "Bulk Create" ],
        "summary" : "Bulk creation of new entities.",
        "description" : "The response body contains details about results of creation of individual entities. The return value is a map where keys are types of entities created and values are again maps where keys are the canonical paths of the entities to be created and values are HTTP status codes - 201 OK, 400 if invalid path is supplied, 409 if the entity already exists on given path or 500 in case of internal error.",
        "operationId" : "addEntities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "This is a map where keys are paths to the parents under which entities should be created. The values are again maps where keys are one of [environment, resourceType, metricType, operationType, feed, resource, metric, dataEntity, relationship] and values are arrays of blueprints of entities of the corresponding types.",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "object"
                }
              }
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Entities successfully created"
          }
        }
      }
    },
    "/entity/{path}" : {
      "get" : {
        "tags" : [ "Single Entity" ],
        "summary" : "Reads an inventory entity on the given location.",
        "description" : "",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name": "path",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "See the documentation above for the format of the path."
        } ],
        "responses" : {
          "200" : {
            "description" : "A single entity found and returned.",
            "schema" : {
              "$ref" : "#/definitions/AbstractElement"
            }
          },
          "404" : {
            "description" : "No entity found on given path."
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Single Entity" ],
        "summary" : "Deletes an inventory entity on the given location.",
        "description" : "",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description" : "See the documentation above for the format of the path."
        } ],
        "responses" : {
          "204" : {
            "description" : "Entity deleted."
          },
          "404" : {
            "description" : "No entity found on given traversal URI."
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "Single Entity" ],
        "summary" : "Updates an entity. The path is actually a canonical path. The format of the accepted JSON object is governed by the type of the entity being updated. If you're updating an environment, look for EnvironmentUpdate type, etc.",
        "description" : "",
        "operationId" : "put",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description" : "See the documentation above for the format of the path."
        }, {
          "in" : "body",
          "name" : "update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AbstractElementUpdate"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Entity updated."
          },
          "400" : {
            "description" : "Data in wrong format"
          },
          "403" : {
            "description" : "Unauthorized access"
          },
          "404" : {
            "description" : "Entity not found."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/entity/{path}/{type}" : {
      "post" : {
        "tags" : [ "Single Entity" ],
        "summary" : "Creates a new entity",
        "description" : "As all POSTs, this can also accept an array of blueprints to create more than 1 entity at a time.",
        "operationId" : "post",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description" : "See the documentation above for the format of the path."
        }, {
          "name": "type",
          "in": "path",
          "required": true,
          "type": "string",
          "enum": ["environment", "e", "resourceType", "rt", "metricType", "mt", "operationType", "ot", "metadataPack", "mp", "feed", "f", "resource", "r", "metric", "m", "data", "d"],
          "description": "The type is either a camel-cased full name of the entity type or its short identifier as used in canonical path."
        }, {
          "in" : "body",
          "name" : "blueprint",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AbstractElementBlueprint"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Entity(ies) created.",
            "schema" : {
              "$ref" : "#/definitions/AbstractElement"
            }
          },
          "400" : {
            "description" : "Data in wrong format"
          },
          "403" : {
            "description" : "Unauthorized access"
          },
          "404" : {
            "description" : "One of the related entities doesn't exist."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/entity/{path}/treeHash" : {
      "get" : {
        "tags" : [ "Single Entity" ],
        "summary" : "Obtains the identity tree hash of the entity.",
        "description" : "",
        "operationId" : "getTreeHash",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description" : "See the documentation above for the format of the path."
        } ],
        "responses" : {
          "200" : {
            "description" : "Tree hash returned.",
            "schema" : {
              "$ref" : "#/definitions/IdentityHashTree"
            }
          },
          "400" : {
            "description" : "The entity doesn't support identity hashing."
          },
          "404" : {
            "description" : "No entity found on given traversal URI."
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Listen on stream of the events",
        "description" : "",
        "operationId" : "getEvents",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "resource"
        }, {
          "name" : "action",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "created"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Unauthorized access"
          },
          "404" : {
            "description" : "Tenant doesn't exist",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/graph" : {
      "get" : {
        "tags" : [ "Graph" ],
        "summary" : "Gets the graph.",
        "description" : "",
        "operationId" : "getGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Unauthorized access"
          },
          "404" : {
            "description" : "Tenant doesn't exist",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/sync/{path}" : {
      "post" : {
        "tags" : [ "Sync" ],
        "summary" : "Make the inventory under given path match the provided inventory structure. Note that the relationships specified in the provided entities will be ignored and will not be applied.",
        "description" : "",
        "operationId" : "sync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description": "The canonical path to the synced entity."
        }, {
          "name" : "structure",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InventoryStructure"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Synchronization success"
          },
          "400" : {
            "description" : "If the entity to be synchronized doesn't support synchronization",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Authorization problem",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/tenant" : {
      "get" : {
        "tags" : [ "Tenant Information" ],
        "summary" : "Retrieves the details of the current tenant.",
        "description" : "",
        "operationId" : "getTenant",
        "responses" : {
          "200" : {
            "description" : "Tenant obtained",
            "schema" : {
              "$ref" : "#/definitions/Tenant"
            }
          },
          "403" : {
            "description" : "Authorization error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tenant Information" ],
        "summary" : "Updates the properties of the tenant",
        "description" : "",
        "operationId" : "putTenant",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantUpdate"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Tenant updated"
          },
          "403" : {
            "description" : "Authorization error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/tenant/relationship" : {
      "post" : {
        "tags" : [ "Tenant Information" ],
        "summary" : "Creates new relationship(s) on a tenant",
        "description" : "As all POSTs, this can also accept an array of blueprints to create more than 1 relationship at a time.",
        "operationId" : "createRelationships",
        "responses" : {
          "201" : {
            "description" : "Relationship(s) created.",
            "schema" : {
              "$ref" : "#/definitions/Relationship"
            }
          },
          "400" : {
            "description" : "Data in wrong format"
          },
          "403" : {
            "description" : "Unauthorized access"
          },
          "404" : {
            "description" : "One of the related entities doesn't exist."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/tenant/relationships.*" : {
      "get" : {
        "tags" : [ "Tenant Information" ],
        "summary" : "Retrieves tenant's relationships",
        "description" : "By default, all the outgoing relationships are returned. This can be modified using the same techniques as in the entity graph traversal.",
        "operationId" : "getRelationships",
        "responses" : {
          "200" : {
            "description" : "Relationships returned",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Relationship"
              }
            }
          },
          "403" : {
            "description" : "Authorization error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/traversal/{traversal}" : {
      "get" : {
        "tags" : [ "Entity Graph Traversal" ],
        "summary" : "Retrieves a list of entities",
        "description" : "Given the traversal of inventory expressed in the URL, this will return a (possibly empty) list of entities that the traversal found. The results can be paged. See above for a thorough description of the format of the URL. The type of the returned elements is determined by the URL.",
        "operationId" : "getTraversal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "traversal",
          "in" : "path",
          "required" : true,
          "type": "string",
          "description" : "See the documentation above for the format of the traversal."
        } ],
        "responses" : {
          "200" : {
            "description" : "Traversal finished successfully.",
            "schema" : {
              "$ref" : "#/definitions/AbstractElement"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AbstractElement" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "$ref" : "#/definitions/CanonicalPath"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "id" : {
          "type" : "string"
        }
      },
      "required": ["path"]
    },
    "AbstractElementBlueprint" : {
      "type" : "object",
      "properties" : {
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "AbstractElementUpdate" : {
      "type" : "object",
      "properties" : {
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "ApiError" : {
      "type" : "object",
      "properties" : {
        "errorMsg" : {
          "type" : "string",
          "description" : "Detailed error message of what happened",
          "readOnly" : true
        },
        "details" : {
          "type" : "object",
          "description" : "Optional details about the error beyond what's provided in the error message.",
          "readOnly" : true
        }
      },
      "description" : "If REST-call returns other than success, detailed error is returned."
    },
    "CanonicalPath" : {
      "type" : "string",
      "description" : "A canonical path is slash-separated list of path segments that uniquely identity an entity in the Hawkular Inventory graph. The path follows the \"contains\" relationships in inventory (which form a tree structure). Each segment specifies the type of the element on that position in the tree, followed by semicolon and the ID of the element. An example of a canonical path would be \"/t;tenant/f;my-feed/r;my-resource\". The type is one of 't' (tenant), 'e' (environment), 'rt' (resource type), 'mt' (metric type), 'ot' (operation type), 'mp' (metadata pack), 'r' (resource), 'm' (metric), 'd' (data) or 'rl' (relationship). Please consult Hawkular Inventory documentation for a more thorough discussion of the different types of entities and their places in the model."
    },
    "DataEntity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type": "object"
          }
        },
        "description" : "Data entity contains JSON data and serves a certain \"role\" in the entity it is contained in"
      } ]
    },
    "DataEntityBlueprint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JSON"
          }
        },
        "required": ["value"]
      } ]
    },
    "DataEntityUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type": "object"
          }
        },
        "required": ["value"]
      }]
    },
    "Entity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AbstractElement"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        },
        "description" : "Defines the basic properties of all entity types in inventory"
      } ]
    },
    "EntityBlueprint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AbstractElementBlueprint"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "outgoingRelationships" : {
            "type" : "object",
            "description": "This is an object where keys are the names of the relationships and values are arrays of canonical paths."
          },
          "incomingRelationships" : {
            "type" : "object",
            "description": "This is an object where keys are the names of the relationships and values are arrays of canonical paths."
          }
        },
        "required": ["id"]
      } ]
    },
    "EntityUpdate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AbstractElementUpdate"
      }, {
        "type" : "object",
        "properties" : {
          "name": {
            "type": "string"
          }
        }
      } ]
    },
    "Environment" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "description" : "Environment can incorporate feeds and can contain resources and metrics."
      } ]
    },
    "EnvironmentBlueprint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object"
      } ]
    },
    "EnvironmentUpdate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object"
      } ]
    },
    "Feed" : {
      "allOf" : [{
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "description" : "A feed represents a remote \"agent\" that is reporting its data to Hawkular."
      }]
    },
    "FeedBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object"
      }]
    },
    "FeedUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object"
      }]
    },
    "IdentityHashTree" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "$ref" : "#/definitions/RelativePath"
        },
        "hash" : {
          "type" : "string"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentityHashTree"
          }
        }
      },
      "required": ["path", "hash"]
    },
    "IdentityHashedEntity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "identityHash" : {
            "type" : "string"
          }
        },
        "required": ["identityHash"],
        "description" : "A super type of all entities that support identity hashing"
      } ]
    },
    "JSON" : {
      "type" : "object",
      "description" : "Just a free form JSON."
    },
    "MetadataPack" : {
      "allOf" : [{
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "description" : "A metadata pack can incorporate global resource and metric types making them read-only."
      }]
    },
    "MetadataPackBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/AbstractElementBlueprint"
      }, {
        "type" : "object",
        "properties" : {
          "members" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/definitions/CanonicalPath"
            }
          },
          "name" : {
            "type" : "string"
          }
        },
        "required": ["members"]
      }]
    },
    "MetadataPackUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object"
      }]
    },
    "Metric" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/definitions/MetricType"
          },
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required": ["type", "collectionInterval"],
        "description" : "A metric represents a monitored \"quality\". Its metric type specifies the unit in which the metric reports its values and the collection interval specifies how often the feed should be collecting the metric for changes in value."
      } ]
    },
    "MetricBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object",
        "properties" : {
          "metricTypePath" : {
            "type" : "string"
          },
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required": ["metricTypePath", "collectionInterval"]
      }]
    },
    "MetricType" : {
      "allOf" : [{
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "enum" : [ "NONE", "PERCENTAGE", "BYTES", "KILOBYTES", "MEGABYTES", "GIGABYTES", "TERABYTES", "PETABYTES", "BITS", "KILOBITS", "MEGABITS", "GIGABITS", "TERABITS", "PETABITS", "EPOCH_MILLISECONDS", "EPOCH_SECONDS", "JIFFYS", "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "PER_JIFFY", "PER_NANOSECOND", "PER_MICROSECOND", "PER_MILLISECOND", "PER_SECOND", "PER_MINUTE", "PER_HOUR", "PER_DAY", "CELSIUS", "KELVIN", "FAHRENHEIGHT" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "GAUGE", "AVAILABILITY", "COUNTER", "COUNTER_RATE" ]
          },
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required": ["unit", "type", "collectionInterval"],
        "description" : "Metric type defines the unit and data type of a metric. It also specifies the default  collection interval as a guideline for the feed on how often to collect the metric values."
      }]
    },
    "MetricTypeBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "enum" : [ "NONE", "PERCENTAGE", "BYTES", "KILOBYTES", "MEGABYTES", "GIGABYTES", "TERABYTES", "PETABYTES", "BITS", "KILOBITS", "MEGABITS", "GIGABITS", "TERABITS", "PETABITS", "EPOCH_MILLISECONDS", "EPOCH_SECONDS", "JIFFYS", "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "PER_JIFFY", "PER_NANOSECOND", "PER_MICROSECOND", "PER_MILLISECOND", "PER_SECOND", "PER_MINUTE", "PER_HOUR", "PER_DAY", "CELSIUS", "KELVIN", "FAHRENHEIGHT" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "GAUGE", "AVAILABILITY", "COUNTER", "COUNTER_RATE" ]
          },
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required": ["unit", "type", "collectionInterval"]
      }]
    },
    "MetricTypeUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "enum" : [ "NONE", "PERCENTAGE", "BYTES", "KILOBYTES", "MEGABYTES", "GIGABYTES", "TERABYTES", "PETABYTES", "BITS", "KILOBITS", "MEGABITS", "GIGABITS", "TERABITS", "PETABITS", "EPOCH_MILLISECONDS", "EPOCH_SECONDS", "JIFFYS", "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "PER_JIFFY", "PER_NANOSECOND", "PER_MICROSECOND", "PER_MILLISECOND", "PER_SECOND", "PER_MINUTE", "PER_HOUR", "PER_DAY", "CELSIUS", "KELVIN", "FAHRENHEIGHT" ]
          },
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }]
    },
    "MetricUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityUpdate"
      }, {
        "type" : "object",
        "properties" : {
          "collectionInterval" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }]
    },
    "OperationType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "description" : "Defines an type of operation that can be executed on resources of a resource type that contains this operation type. The operation type contains \"returnType\" and \"parameterTypes\" data entities which correspond to JSON schemas of values expected during the operation execution."
      } ]
    },
    "OperationTypeBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object"
      }]
    },
    "OperationTypeUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/EntityBlueprint"
      }, {
        "type" : "object"
      }]
    },
    "Path" : {
      "type" : "object"
    },
    "Relationship" : {
      "allOf" : [{
        "$ref" : "#/definitions/AbstractElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "source" : {
            "$ref" : "#/definitions/CanonicalPath"
          },
          "target" : {
            "$ref" : "#/definitions/CanonicalPath"
          }
        },
        "required": ["id", "source", "target"],
        "description" : "A relationship between two entities."
      }]
    },
    "RelationshipBlueprint" : {
      "allOf" : [{
        "$ref" : "#/definitions/AbstractElementUpdate"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "otherEnd" : {
            "$ref" : "#/definitions/Path"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "outgoing", "incoming", "both" ]
          }
        },
        "required": ["name", "otherEnd", "direction"]
      }]
    },
    "RelationshipUpdate" : {
      "allOf" : [{
        "$ref" : "#/definitions/AbstractElementUpdate"
      }, {
        "type" : "object"
      }]
    },
    "RelativePath" : {
      "type" : "string"
    },
    "Resource" : {
      "allOf" : [{
        "$ref" : "#/definitions/IdentityHashedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/definitions/ResourceType"
          }
        },
        "description" : "A resource has a type, can have configuration and connection configuration and can incorporate metrics."
      }]
    },
    "ResourceBlueprint" : {
      "allOf" : [{
        "$ref": "#/definitions/EntityBlueprint"
      }, {
        "type": "object",
        "properties": {
          "resourceTypePath" : {
            "type" : "string"
          }
        },
        "required": ["resourceTypePath"]
      }]
    },
    "ResourceType" : {
      "allOf": [{
        "$ref": "#/definitions/IdentityHashedEntity"
      }, {
        "type": "object",
        "description" : "A resource type contains metadata about resources it defines. It contains \"configurationSchema\" and \"connectionConfigurationSchema\" data entities that can prescribe a JSON schema to which the configurations of the resources should conform."
      }]
    },
    "ResourceTypeBlueprint" : {
      "allOf": [{
        "$ref": "#/definitions/EntityBlueprint"
      }]
    },
    "ResourceTypeUpdate" : {
      "allOf": [{
        "$ref": "#/definitions/EntityUpdate"
      }]
    },
    "ResourceUpdate" : {
      "allOf": [{
        "$ref": "#/definitions/EntityUpdate"
      }]
    },
    "Tenant" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "description" : "The tenants partition the data in the inventory graph. No relationships between entities from 2 different tenants can exist."
      } ]
    },
    "TenantUpdate" : {
      "allOf": [{
        "$ref": "#/definitions/EntityUpdate"
      }]
    },
    "InventoryStructure" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : ["feed", "resourceType", "metricType", "operationType", "metric", "resource", "dataEntity"]
        },
        "data" : {
          "$ref" : "#/definitions/EntityBlueprint"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureMap"
          }
        }
      },
      "required": ["type", "data"]
    },
    "InventoryStructureMap" : {
      "type" : "object",
      "properties" : {
        "feed" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "resourceType" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "metric" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "metricType" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "dataEntity" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        },
        "operationType" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureChild"
          }
        }
      }
    },
    "InventoryStructureChild" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/EntityBlueprint"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InventoryStructureMap"
          }
        }
      },
      "required": ["data"]
    }
  }
}
